{
	"info": {
		"_postman_id": "c2639f48-7f36-4a97-ac56-c7ad9cbd6269",
		"name": "Platzi Fake Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32872262"
	},
	"item": [
		{
			"name": "Rest API Users",
			"item": [
				{
					"name": "Create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201[While create auser]\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format [While create auser]\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.email).to.be.a('string').and.to.match(/\\S+@\\S+\\.\\S+/);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Asmaa\",\r\n  \"email\": \"asmaa@gmail.com\",\r\n  \"password\": \"1234\",\r\n  \"avatar\": \"https://picsum.photos/800\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.escuelajs.co/api/v1/users/",
							"protocol": "https",
							"host": [
								"api",
								"escuelajs",
								"co"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get A user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200 [While get auser]\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format[While get auser]\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Password should not be empty[While get auser]\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.password).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.escuelajs.co/api/v1/users/503",
							"protocol": "https",
							"host": [
								"api",
								"escuelajs",
								"co"
							],
							"path": [
								"api",
								"v1",
								"users",
								"503"
							],
							"query": [
								{
									"key": "id",
									"value": "503",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200[while update auser]\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields[while update auser]\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('id', 'email', 'password', 'name', 'role', 'avatar', 'creationAt', 'updatedAt');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format[while update auser]\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Role is a non-empty string [while update auser]\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.role).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Role should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"asmaa@gmail.com\",\r\n  \"name\": \"Asmaaaaaaaa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.escuelajs.co/api/v1/users/503",
							"protocol": "https",
							"host": [
								"api",
								"escuelajs",
								"co"
							],
							"path": [
								"api",
								"v1",
								"users",
								"503"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field 'isAvailable'[Check the email]\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('isAvailable');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"IsAvailable field is a boolean value\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.isAvailable).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"asmaa@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.escuelajs.co/api/v1/users/is-available",
							"protocol": "https",
							"host": [
								"api",
								"escuelajs",
								"co"
							],
							"path": [
								"api",
								"v1",
								"users",
								"is-available"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://todo.qacart.com/\n",
							"protocol": "https",
							"host": [
								"todo",
								"qacart",
								"com"
							],
							"path": [
								"\n"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - access_token and refresh_token\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.access_token).to.exist;\r",
									"  pm.expect(responseData.refresh_token).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Access token is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Refresh token is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.refresh_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " \r\n{\r\n \"email\": \"asmaa@gmail.com\",\r\n    \"password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.escuelajs.co/api/v1/auth/login",
							"protocol": "https",
							"host": [
								"api",
								"escuelajs",
								"co"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user with session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.include.all.keys('id', 'email', 'password', 'name', 'role', 'avatar', 'creationAt', 'updatedAt');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Avatar is a non-empty string or null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.avatar).to.satisfy((avatar) => {\r",
									"    return typeof avatar === 'string' || avatar === null;\r",
									"  }, \"Avatar should be a non-empty string or null\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUwMywiaWF0IjoxNzExNTI1NDQ5LCJleHAiOjE3MTMyNTM0NDl9.asdBhw003cWldYt2KZnm-iCnwGJ6kFqnCI_05TJC-s4",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": " ",
								"type": "text"
							},
							{
								"key": "",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUwMywiaWF0IjoxNzExNTI1NDQ5LCJleHAiOjE3MTMyNTM0NDl9.asdBhw003cWldYt2KZnm-iCnwGJ6kFqnCI_05TJC-s4",
								"description": "Asmaa token",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://api.escuelajs.co/api/v1/auth/profile",
							"protocol": "https",
							"host": [
								"api",
								"escuelajs",
								"co"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200[Get all categories]\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer[Get all categories]\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.escuelajs.co/api/v1/categories",
							"protocol": "https",
							"host": [
								"api",
								"escuelajs",
								"co"
							],
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200[Get a single category id =1]\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields [Get a single category id =1]\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('image');\r",
									"    pm.expect(responseData).to.have.property('creationAt');\r",
									"    pm.expect(responseData).to.have.property('updatedAt');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name must be a non-empty string when [Get a single category id =1]\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.escuelajs.co/api/v1/categories/1?id=1",
							"protocol": "https",
							"host": [
								"api",
								"escuelajs",
								"co"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"1"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('image');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('creationAt');\r",
									"    pm.expect(responseData).to.have.property('updatedAt');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name and image are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"    pm.expect(responseData.image).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Image should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ID is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New Category\",\r\n  \"image\": \"https://placeimg.com/640/480/any\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.escuelajs.co/api/v1/categories/",
							"protocol": "https",
							"host": [
								"api",
								"escuelajs",
								"co"
							],
							"path": [
								"api",
								"v1",
								"categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the id, name, image, creationAt, and updatedAt fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('image');\r",
									"    pm.expect(responseData).to.have.property('creationAt');\r",
									"    pm.expect(responseData).to.have.property('updatedAt');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id must be a non-negative integer\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Asmaa Brand\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.escuelajs.co/api/v1/categories/48",
							"protocol": "https",
							"host": [
								"api",
								"escuelajs",
								"co"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"48"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response content type is 'text/html'\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains a boolean value\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response body is true\", function () {\r",
									"  pm.expect(pm.response.text()).to.equal(\"true\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.escuelajs.co/api/v1/categories/48",
							"protocol": "https",
							"host": [
								"api",
								"escuelajs",
								"co"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"48"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products by category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(product) {\r",
									"    pm.expect(product.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Images array must contain at least one element\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(product) {\r",
									"    pm.expect(product.images).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Images array should contain at least one element\");\r",
									"  });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.escuelajs.co/api/v1/categories/1/products",
							"protocol": "https",
							"host": [
								"api",
								"escuelajs",
								"co"
							],
							"path": [
								"api",
								"v1",
								"categories",
								"1",
								"products"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}